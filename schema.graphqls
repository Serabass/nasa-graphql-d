
directive @Root(path: String!) on FIELD_DEFINITION
directive @Fetch(path: String!) on FIELD_DEFINITION
directive @PassNext(path: String!) on FIELD_DEFINITION

type ApiQuery {
    natural: [NaturalResponse!]!
}

type APODResponse {
    copyright: String!
    date: String!
    explanation: String!
    hdurl: String!
    media_type: String!
    service_version: String!
    title: String!
    url: String!
}

type Asset {
    id: String!
    date: String!
}

type AssetsResponse {
    count: Float!
    results: [Asset!]!
}

type DONKIQuery {
    IPS(startDate: String, endDate: String): [IPSResponse!]!
    FLR(startDate: String, endDate: String): [FLRResponse!]!
}

type EarthQuery {
    imagery(lon: Float!, lat: Float!, date: String!, cloud_score: Boolean!): ImageryResponse!
    assets(lon: Float!, lat: Float!, begin: String!): AssetsResponse!
}

type EPICQuery {
    # /api
    api: ApiQuery!
}

type ExoplanetsQuery {
    nsted: NstedAPIQuery! @PassNext(path: "/cgi-bin/nstedAPI")
}

type FLRResponse {
    flrID: String
}

type ImageryResponse {
    cloud_score: Float!
    date: String!
    id: String!
    service_version: String!
    url: String!
}

type IPSResponse {
    catalog: String
}

type LocationResponse {
    location: String!
}

type MarsPhotosQuery {
    # /api/:version/rovers
    rovers(version: String = "v1"): RoversQuery! @PassNext(path: "/api/:version/rovers")
}

type NASAImagesQuery {
    search(q: String, center: String, description: String, description_508: String, keywords: String, location: String, media_type: String, nasa_id: String, photographer: String, secondary_creator: String, title: String, year_start: String, year_end: String): SearchResponse!
    asset(nasaId: String!): SearchResponse!
    metadata(nasaId: String!): LocationResponse!
    captions(nasaId: String!): LocationResponse!
}

type NASAQuery{
    planetary: PlanetaryQuery! @PassNext(path: "/planetary")
    marsPhotos: MarsPhotosQuery! @PassNext(path: "/mars-photos")
    neo(version: String = "v1"): NeoQuery! @PassNext(path: "/neo/rest/:version")
    EPIC: EPICQuery! @PassNext(path: "/EPIC")
    DONKI: DONKIQuery! @PassNext(path: "/DONKI")
    techport: TechportQuery! @PassNext(path: "/techport")
}

type NaturalResponse {
    identifier: String!
    caption: String!
    image: String!
    version: String!
    date: String!
}

type NeoBrowseResponse {
    near_earth_objects: [NEOObject!]!
}

type NeoFeedResponse {
    element_count: Float!
}

type NEOObject {
    neo_reference_id: String!
    name: String!
}

type NeoQuery {
    feed: NeoFeedResponse!
    neo(id: Int!): NeoResponse!
    browse: NeoBrowseResponse!
}

type NeoResponse {
    id: String!
    neo_reference_id: String!
    name: String!
    sandbox: String!
}

enum NPHTable {
    exoplanets
    cumulative
}

type NstedAPIQuery {
    nph(table: NPHTable!, where: String!, format: String = "json"): [NstedAPIResponse!]! @Fetch(path: "/nph-nstedAPI")
}

type NstedAPIResponse {
    pl_hostname: String!
    pl_letter: String!
}

type Photo {
    id: Float!
    sol: Float!
    img_src: String!
}

type RoverCamera {
    id: Int
    name: String
    rover_id: Int
    full_name: String
}

type Rover {
    id: Int
    name: String
    landing_date: String
    launch_date: String
    status: String
    max_sol: Int
    max_date: String # Date
    total_photos: Int
    cameras: [RoverCamera]
}

type Photo2 {
    id: Float!
    sol: Float!
    img_src: String!
    camera: RoverCamera
    earth_date: String # TODO Change to Date
    rover: Rover
}

type PhotosResponse {
    photos: [Photo!]!
}

type PhotosResponse2 {
    photos: [Photo2!]!
}

type PlanetaryQuery {
    apod(date: String, hd: Boolean): APODResponse @Fetch(path: "/apod")
    earth: EarthQuery! @PassNext(path: "/earth")
}

type Project {
    lastUpdated: String!
    id: Float!
}

type ProjectQuery {
    projects: TechportProjectResponse!
}

type ProjectsQuery {
    projects(updatedSince: String): TechportProjectsResponse!

    # /:id
    project(id: Float!): ProjectQuery!
}

type ProjectsResponse {
    totalCount: Float!
    projects: [Project!]!
}

type Query {
    NASA(key: String!): NASAQuery @Root(path: "https://api.nasa.gov")
    NASAImages: NASAImagesQuery @Root(path: "https://images-api.nasa.gov")
    Exoplanets: ExoplanetsQuery @Root(path: "https://exoplanetarchive.ipac.caltech.edu")
    rateLimitRemaining: Int
    rateLimit: Int
}

# https://api.nasa.gov/api.html#MarsPhotos
enum RoverCameraEnum {
    fhaz
    rhaz
    mast
    chemcam
    mahli
    mardi
    navcam
    pancam
    minites
}

type RoverQuery {
    photos(sol: Float,
           earth_date: String,
           page: Float = 1,
           camera: RoverCameraEnum): PhotosResponse2! @Fetch(path: "/photos")
}

enum RoverName {
    curiosity
    opportunity
    spirit
}

type RoversQuery {
    photos(sol: Float!, roverName: RoverName): PhotosResponse!
    rover(roverName: RoverName): RoverQuery! @PassNext(path: "/:roverName")
}

type SearchCollectionResponse {
    href: String!
}

type SearchResponse {
    collection: SearchCollectionResponse!
}

type TechportProjectData {
    benefits: String!
}

type TechportProjectResponse {
    project: TechportProjectData!
}

type TechportProjectsResponse {
    projects: ProjectsResponse!
}

type TechportQuery {
    # /api/projects
    projects: ProjectsQuery!
}
